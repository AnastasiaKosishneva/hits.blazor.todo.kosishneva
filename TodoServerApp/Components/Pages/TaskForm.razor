@page "/tasks/add"
@page "/tasks/{Id:int}"

@inject IDataService data
@inject NavigationManager navigate
@if (TaskItem != null)

{
    <EditForm Model="TaskItem" FormName="TaskForm" OnValidSubmit="ValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <h2>Новая задача</h2>
        <InputNumber @bind-Value="TaskItem.Id" hidden />
        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Какой товар хотите добавить?</label>
            <InputText @bind-Value="TaskItem.Product" Class="form-control" />
            <ValidationMessage For="() => TaskItem.Product" />
        </div>
        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Какая категория этого товара?</label>
            <InputText @bind-Value="TaskItem.Category" Class="form-control" />
            <ValidationMessage For="() => TaskItem.Category" />
        </div>
        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Укажите цену товара</label>
            <InputText @bind-Value="TaskItem.Order" Class="form-control" />
            <ValidationMessage For="() => TaskItem.Order" />
        </div>
        <div class="btn-group">
            <button class="btn btn-primary m-2" type="submit">Сохранить</button>
            <a class="btn btn-primary m-2" href="/">Отмена</a>
        </div>
    </EditForm>
}

@code {
    [Parameter]

    public int Id { get; set; }



    [SupplyParameterFromForm]

    TaskItem? TaskItem { get; set; }



    protected override async Task OnInitializedAsync()

    {

        await base.OnInitializedAsync();

        if (TaskItem == null)

        {

            TaskItem = new();

            if (Id != 0)

            {
                var src = await data.GetTaskAsync(Id);

                TaskItem.Id = src.Id;

                TaskItem.Product = src.Product;

                TaskItem.Category = src.Category;

                TaskItem.Order = src.Order;
            }

        }

    }



    async Task ValidSubmit()

    {
        await data.SaveAsync(TaskItem!);

        navigate.NavigateTo("/");

    }
}