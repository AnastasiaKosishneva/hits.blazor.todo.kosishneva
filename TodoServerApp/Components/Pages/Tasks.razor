@* @page "/"
@rendermode InteractiveServer
@inject IDataService data
@inject NavigationManager navigate

<PageTitle>Корзина товаров</PageTitle>
<h1>Мои задачи</h1>

<div class="container">
    @if (tasks == null)

    {
        <tr>
            <td colspan="4">
                Loading ...
            </td>
        </tr>
    }

    else

    {
        <div class="btn-group m-2">
            <button class="btn btn-primary" @onclick="AddTask">Добавить товар</button>
        </div>
        <div class="card-group">
            @foreach (var t in tasks)

            {
                <div class="card" style="background-color: @(t.IsAddedToCart ? "#d4edda" : "white");">
                    <div class="card-header">
                        @t.Id
                    </div>
                    <div class="card-body">
                        <p>@t.Category</p>
                        <p>@t.Order</p>
                    </div>
                    <div class="card-footer">
                        <a class="btn btn-primary" href="tasks/@t.Id">Обработать</a>
                        <button class="btn btn-primary" @onclick="() => ToggleCartStatus(t)">
                            @(t.IsAddedToCart ? "Убрать из корзины" : "Добавить в корзину")
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeleteTask(t.Id)">Удалить</button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    IEnumerable<TaskItem>? tasks; // Список объектов класса TaskItem

    protected override async Task OnInitializedAsync()

    {

        await base.OnInitializedAsync();

        tasks = await data.GetAllAsync();

    }

    void AddTask()

    {

        navigate.NavigateTo("tasks/add");

    }

    async Task DeleteTask(int id)

    {

        await data.DeleteAsync(id);

        tasks = await data.GetAllAsync();

    }

    void ToggleCartStatus(TaskItem task)

    {

        // Переключаем статус добавления в корзину

        task.IsAddedToCart = !task.IsAddedToCart;

        StateHasChanged(); // Обновляем интерфейс

    }
}
 

@page "/"
@rendermode InteractiveServer
@inject IDataService data
@inject NavigationManager navigate

<PageTitle>Корзина товаров</PageTitle>
<h1>Корзина товаров</h1>

<div class="container">
    @if (tasks == null)

    {
        <p>Загрузка...</p>
    }

    else

    {
        <div class="btn-group m-2">
            <button class="btn btn-primary" @onclick="AddTask">Добавить товар</button>
        </div>
        <div class="card-group">
            @foreach (var t in tasks)

            {
                <div class="card" style="background-color: @(t.IsAddedToCart ? "#d4edda" : "white");">
                    <div class="card-header">
                        Товар ID: @t.Id
                    </div>
                    <div class="card-body">
                        <p>Категория: @t.Category</p>
                        <p>Заказов: @t.Order</p>
                    </div>
                    <div class="card-footer">
                        <a class="btn btn-info" @onclick="() => EditTask(t.Id)">Изменить</a>
                        <button class="btn btn-primary" @onclick="() => ToggleCartStatus(t)">
                            @(t.IsAddedToCart ? "Убрать из корзины" : "Добавить в корзину")
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeleteTask(t.Id)">Удалить</button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    IEnumerable<TaskItem>? tasks; // Список объектов TaskItem



    protected override async Task OnInitializedAsync()

    {

        tasks = await data.GetAllAsync();

    }



    void AddTask()

    {

        navigate.NavigateTo("tasks/add");

    }



    void EditTask(int id)

    {

        navigate.NavigateTo($"tasks/edit/{id}");

    }



    async Task DeleteTask(int id)

    {

        await data.DeleteAsync(id);

        tasks = await data.GetAllAsync(); // Обновление списка

    }



    void ToggleCartStatus(TaskItem task)

    {

        task.IsAddedToCart = !task.IsAddedToCart;

        StateHasChanged(); // Обновление интерфейса

    }
}



@page "/"
@rendermode InteractiveServer
@inject IDataService data
@inject NavigationManager navigate

<PageTitle>Корзина товаров</PageTitle>
<h1>Корзина товаров</h1>

<div class="container">
    <div class="input-group m-2">
        <input type="text" class="form-control" placeholder="Поиск товаров..." @bind="searchQuery" />
        <button class="btn btn-primary" @onclick="SearchTasks">Поиск</button>
        <button class="btn btn-secondary" @onclick="ResetSearch">Сброс</button>
    </div>

    @if (tasks == null)

    {
        <p>Загрузка...</p>
    }

    else

    {
        <div class="btn-group m-2">
            <button class="btn btn-primary" @onclick="AddTask">Добавить товар</button>
        </div>
        <div class="card-group">
            @foreach (var t in filteredTasks)

            {
                <div class="card" style="background-color: @(t.IsAddedToCart ? "#d4edda" : "white");">
                    <div class="card-header">
                        Товар ID: @t.Id
                    </div>
                    <div class="card-body">
                        <p>Категория: @t.Category</p>
                        <p>Заказов: @t.Order</p>
                    </div>
                    <div class="card-footer">
                        <a class="btn btn-info" @onclick="() => EditTask(t.Id)">Изменить</a>
                        <button class="btn btn-primary" @onclick="() => ToggleCartStatus(t)">
                            @(t.IsAddedToCart ? "Убрать из корзины" : "Добавить в корзину")
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeleteTask(t.Id)">Удалить</button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    IEnumerable<TaskItem>? tasks; // Список всех объектов TaskItem

    IEnumerable<TaskItem>? filteredTasks; // Отфильтрованные объекты для отображения

    string searchQuery = ""; // Строка для хранения запроса поиска



    protected override async Task OnInitializedAsync()

    {

        tasks = await data.GetAllAsync();

        filteredTasks = tasks; // По умолчанию отображаем все задачи

    }



    void AddTask()

    {

        navigate.NavigateTo("tasks/add");

    }



    void EditTask(int id)

    {

        navigate.NavigateTo($"tasks/edit/{id}");

    }



    async Task DeleteTask(int id)

    {

        await data.DeleteAsync(id);

        tasks = await data.GetAllAsync();

        ApplySearchFilter(); // Обновление списка с учетом текущего фильтра

    }



    void ToggleCartStatus(TaskItem task)

    {

        task.IsAddedToCart = !task.IsAddedToCart;

        StateHasChanged();

    }



    void SearchTasks()

    {

        ApplySearchFilter();

    }



    void ResetSearch()

    {

        searchQuery = "";

        filteredTasks = tasks; // Сброс фильтра

    }



    void ApplySearchFilter()

    {

        if (string.IsNullOrWhiteSpace(searchQuery))

        {

            filteredTasks = tasks;

        }

        else

        {

            filteredTasks = tasks?.Where(t =>

                t.Product.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||

                t.Category.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));

        }

    }
}



@page "/"
@rendermode InteractiveServer
@inject IDataService data
@inject NavigationManager navigate

<PageTitle>Корзина товаров</PageTitle>
<h1>Корзина товаров</h1>

<div class="container">
    @if (tasks == null)

    {
        <p>Загрузка...</p>
    }

    else

    {
        <div class="btn-group m-2">
            <button class="btn btn-primary" @onclick="AddTask">Добавить товар</button>
        </div>
        <div class="card-group">
            @foreach (var t in tasks)

            {
                <div class="card" style="background-color: @(t.IsAddedToCart ? "white" : "white");">
                    <div class="card-header">
                        Товар ID: @t.Id
                    </div>
                    <div class="card-body">
                        <p>Категория: @t.Category</p>
                        <p>Заказов: @t.Order</p>
                        <p>Цена: @t.Quantity</p>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-success" @onclick="() => IncrementQuantity(t)">+</button>
                        <button class="btn btn-warning" @onclick="() => DecrementQuantity(t)" disabled="@(t.Quantity <= 0)">-</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTask(t.Id)">Удаfлить</button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    IEnumerable<TaskItem>? tasks;



    protected override async Task OnInitializedAsync()

    {

        tasks = await data.GetAllAsync();

    }



    void AddTask()

    {

        navigate.NavigateTo("tasks/add");

    }



    async Task DeleteTask(int id)

    {

        await data.DeleteAsync(id);

        tasks = await data.GetAllAsync();

    }



    void IncrementQuantity(TaskItem task)

    {

        task.Quantity++;

        StateHasChanged();

    }



    void DecrementQuantity(TaskItem task)

    {

        if (task.Quantity > 0)

        {

            task.Quantity--;

            StateHasChanged();

        }

    }
}


*@
@page "/"
@rendermode InteractiveServer
@inject IDataService data
@inject NavigationManager navigate

<PageTitle>Корзина товаров</PageTitle>
<h1 class="page-title">Корзина товаров</h1>

<div class="container">
    @if (tasks == null)

    {
        <p>Загрузка...</p>
    }

    else

    {
        <div class="input-group m-2">
            <input type="text" class="form-control" placeholder="Поиск товара..." @bind="searchQuery" />
            <button class="btn btn-primary" @onclick="SearchTasks">Найти</button>
            <button class="btn btn-secondary" @onclick="ResetSearch">Сбросить</button>
        </div>
        <div class="btn-group m-2">
            <button class="btn btn-primary" @onclick="AddTask">Добавить товар</button>
        </div>
        <div class="card-group">
            @foreach (var t in filteredTasks)

            {
                <div class="card @(t.IsSelected ? "selected-card" : "")"
                     @onmouseenter="() => ToggleHoverState(t, true)"
                     @onmouseleave="() => ToggleHoverState(t, false)"
                     @onclick="() => ToggleSelectState(t)">
                    <div class="card-header">
                        <span class="card-id"><p>Товар: @t.Product</p></span>
                    </div>
                    <div class="card-body">
                        <p>Категория: @t.Category</p>
                        <p>Цена: @t.Order руб.</p>
                        <p>Добавлено: @t.Quantity</p>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-success" @onclick:stopPropagation="true" @onclick="() => IncrementQuantity(t)">+</button>
                        <button class="btn btn-warning" @onclick:stopPropagation="true" @onclick="() => DecrementQuantity(t)" disabled="@(t.Quantity <= 0)">-</button>
                        <button class="btn btn-danger" @onclick:stopPropagation="true" @onclick="() => DeleteTask(t.Id)">Удалить</button>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .page-title {
        text-align: center; /* Центровка текста */
        font-size: 2.5rem; /* Увеличение размера шрифта */
        margin: 20px 0; /* Отступы сверху и снизу */
        font-weight: bold; /* Жирный текст */
        color: #2c3e50; /* Цвет текста */
    }

    .card-id {
        text-align: center; /* Центровка текста */
        font-size: 1.2rem; /* Увеличение шрифта ID */
        font-weight: bold; /* Жирный текст для ID */
        color: #34495e; /* Темно-синий цвет */
    }

    .card:hover {
        background-color: #f0f8ff; /* Цвет при наведении */
    }

    .selected-card {
        background-color: #add8e6; /* Цвет при выборе */
    }
</style>

@code {
    IEnumerable<TaskItem>? tasks; // Все товары

    List<TaskItem> filteredTasks = new(); // Отфильтрованные товары для поиска

    string searchQuery = string.Empty; // Строка поиска



    protected override async Task OnInitializedAsync()

    {

        tasks = await data.GetAllAsync();

        filteredTasks = tasks.ToList(); // Начальная инициализация

    }



    void AddTask()

    {

        navigate.NavigateTo("tasks/add");

    }



    async Task DeleteTask(int id)

    {

        await data.DeleteAsync(id);

        tasks = await data.GetAllAsync();

        SearchTasks(); // Обновляем список после удаления

    }



    void IncrementQuantity(TaskItem task)

    {

        task.Quantity++;

        StateHasChanged();

    }



    void DecrementQuantity(TaskItem task)

    {

        if (task.Quantity > 0)

        {

            task.Quantity--;

            StateHasChanged();

        }

    }



    void SearchTasks()

    {

        if (string.IsNullOrWhiteSpace(searchQuery))

        {

            filteredTasks = tasks?.ToList() ?? new List<TaskItem>();

        }

        else

        {

            filteredTasks = tasks?.Where(t =>

                t.Product.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) || // Поиск по названию товара

                t.Category.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) || // Поиск по категории

                t.Order.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) || // Поиск по количеству заказов

                t.Quantity.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) // Поиск по количеству

            ).ToList() ?? new List<TaskItem>();

        }

    }



    void ResetSearch()

    {

        searchQuery = string.Empty; // Сбрасываем строку поиска

        filteredTasks = tasks?.ToList() ?? new List<TaskItem>(); // Возвращаемся к начальному списку

    }



    void ToggleSelectState(TaskItem task)

    {

        task.IsSelected = !task.IsSelected;

        StateHasChanged();

    }



    void ToggleHoverState(TaskItem task, bool isHovered)

    {

        task.IsHovered = isHovered;

        StateHasChanged();

    }
}
